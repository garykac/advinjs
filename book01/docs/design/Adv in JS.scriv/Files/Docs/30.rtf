{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red105\green105\blue105;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs24 \cf0 Now that we have the player constrained to move on the main platform, we can start working on the rest of the game.\
\
What was that list of things to do?\
\
YOU: Well, we had Platforms, Jumping, Monsters, \'85\
\
Oh wait, I just remembered, we should fix the player movement so that player can build up speed and come sliding to a stop.\
\
Why do we need that?\
\
We don't *need* it, but it makes the game far more satisfying to play than simply moving one or two pixels at a time.\
\
It sounds like it's going to be hard. \
\
It's not. We already have a velocity. We just need to add a maximum velocity and then add some friction.\
\
Friction?\
\
Yes, that will slow you down to a stop.\
\
*** Discussion of velocity and acceleration. ***\
\
\pard\tx1260\tx1860\tx2420\tx3020\tx3560\tx4140\li700\sl288\slmult1\pardirnatural

\f1 \cf2 function init_game() \{\
	...\
	// The keymap keeps track of which keys are currently being pressed.\
	_game.keymap = \{\};\
\
	// Game state.\
	_game.platform = create_platform(0, 360, _game.width, 40);\
\

\f2\b \cf0 	// Global world parameters.\
	_game.friction = 0.15;\

\f1\b0 \cf2 \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0 \cf0 \
delta is the amount that the velocity increases while the movement keys are held down.\
max is the maximum allowed velocity.\
\
\pard\tx1260\tx1860\tx2420\tx3020\tx3560\tx4140\li700\sl288\slmult1\pardirnatural

\f1 \cf2 function init_player() \{\
	...\
	_player.velocity_x = 0;\

\f2\b \cf0 	_player.velocity_x_delta = 0.8;\
	_player.velocity_x_max = 3.5;\

\f1\b0 \cf2 	_player.velocity_y = 0;\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0 \cf0 \
multiply the velocity by (1 - friction). In our case, we're multiplying by 0.85 (= 1 - 0.15) each time we update the game.\
This will cause the velocity to slowly decrease based on how much friction we specify. Higher friction values will cause the player to slow down more quickly.\
\
\pard\tx1260\tx1860\tx2420\tx3020\tx3560\tx4140\li700\sl288\slmult1\pardirnatural

\f1 \cf2 function update_player() \{\
	check_input();\
\

\f2\b \cf0 	// Apply the global world effects on the player.\
	_player.velocity_x *= (1.0 - _game.friction);\

\f1\b0 \cf2 	\
	// Move the player to the new location.\
	_player.x += _player.velocity_x;\
	_player.y += _player.velocity_y;\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0 \cf0 \
YOU: But if we keep multiplying by 0.85, the number will keep getting smaller and smaller, but they'll never reach 0. Doesn't that mean that the player will keep sliding forever? \
\
Mathematically, the velocity won't ever reach 0, but practically once the velocity is less than 0.01 the player won't be moving on the screen anymore.\
\
One more thing we need to do.\
Remove reset velocity to 0. add the delta, make sure it doesn't go too high.\
\
\pard\tx1260\tx1860\tx2420\tx3020\tx3560\tx4140\li700\sl288\slmult1\pardirnatural

\f1 \cf2 function check_input() \{\
\cf0 \strike \strikec0 	_player.velocity_x = 0;\
	_player.velocity_y = 0;\
\cf2 \strike0\striked0 	\
	// Left arrow or 'a' to move left.\
	if (_game.keymap[37] || _game.keymap[65]) \{\
\cf0 \strike \strikec0 		_player.velocity_x = -1;\

\f2\b \strike0\striked0 		_player.velocity_x -= _player.velocity_x_delta;\
		if (_player.velocity_x < -_player.velocity_x_max)\
			_player.velocity_x = -_player.velocity_x_max;\

\f1\b0 \cf2 	\}\
	// Right arrow or 'd' to move right.\
	if (_game.keymap[39] || _game.keymap[68]) \{\
\cf0 \strike \strikec0 		_player.velocity_x = 1;\

\f2\b \strike0\striked0 		_player.velocity_x += _player.velocity_x_delta;\
		if (_player.velocity_x > _player.velocity_x_max)\
			_player.velocity_x = _player.velocity_x_max;\

\f1\b0 \cf2 	\}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0 \cf0 \
\
RUN your code in a browser and verify that it loads without errors.\
IF it works, THEN gain the "Movement II - Friction" badge\
\
IF you want to experiment with different friction values\
	THEN GOTO 16\
	ELSE GOTO 20\
\
\
===============\
\
but that's not quite how we were taught friction in science class\'85\
\
How come we can slide off the edge of the screen?\
\
}